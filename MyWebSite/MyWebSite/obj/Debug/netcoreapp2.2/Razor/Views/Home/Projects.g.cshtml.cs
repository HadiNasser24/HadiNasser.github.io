#pragma checksum "C:\Users\Nasser\source\repos\MyWebSite\MyWebSite\Views\Home\Projects.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9368b04cf387176caa5d48014a09458e509a4d03"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Projects), @"mvc.1.0.view", @"/Views/Home/Projects.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Projects.cshtml", typeof(AspNetCore.Views_Home_Projects))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Nasser\source\repos\MyWebSite\MyWebSite\Views\_ViewImports.cshtml"
using MyWebSite;

#line default
#line hidden
#line 2 "C:\Users\Nasser\source\repos\MyWebSite\MyWebSite\Views\_ViewImports.cshtml"
using MyWebSite.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9368b04cf387176caa5d48014a09458e509a4d03", @"/Views/Home/Projects.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0915b4a45873913d1dacfe45d55d4f713bad4fa", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Projects : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 45, true);
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\" dir=\"ltr\">\r\n");
            EndContext();
            BeginContext(45, 596, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9368b04cf387176caa5d48014a09458e509a4d033368", async() => {
                BeginContext(51, 583, true);
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <title></title>
    <link rel=""stylesheet"" href=""style.css"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery.ripples/0.5.3/jquery.ripples.min.js""></script>
    <link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.7.2/css/all.css"">
    <link rel=""stylesheet"" href=""../css/animate.css"">
    <link rel=""stylesheet"" href=""../css/Projects.css"">

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(641, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(645, 10136, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9368b04cf387176caa5d48014a09458e509a4d035162", async() => {
                BeginContext(651, 10123, true);
                WriteLiteral(@"
    <div class=""services-section"">
        <div class=""inner-width"">
            <div class=""title"">
                <h1 class=""section-title"">Projects</h1>

                <div class=""border""></div>
            </div>
            <div class=""services-container"">
                <div class=""service-box zoomIn animated"">
                    <div class=""service-title"">
                        <a href=""#""><i class=""fas fa-hospital""></i> Hospital Managment System</a>
                    </div>

                    <div class=""service-desc"">
                        A <span style=""color:cyan;"">System</span> that allows you to register <span style=""color:cyan"">patients</span>,<span style=""color:cyan"">doctors</span>,<span style=""color:cyan"">nurses</span>,and <span style=""color:cyan"">trainees</span> and assign them to a specific department.Each <span style=""color:cyan"">doctor</span> and <span style=""color:cyan"">trainee</span> have an account and can view their patients.The <span style=""color:cyan"">adm");
                WriteLiteral(@"in</span> can register,delete,view,and assign rooms and appoitments to patients
                    </div>
                    <ul>
                        <li>
                            <a href=""#"">
                                <span><i class=""fas fa-laptop-code""></i></span>
                                <span><i class=""fab fa-java"" style=""color:white""></i> Coded with Java using - Eclipse</span>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class=""service-box zoomIn animated delay-1s"">
                    <div class=""service-title"">
                        <a href=""#""><i class=""fas fa-university""></i> University Registration System</a>
                    </div>

                    <div class=""service-desc"">
                        The purpose of this thesis is to design and implement a small system for<span style=""color:cyan""> University Registration</span> . It is designed for the <span style=""co");
                WriteLiteral(@"lor:cyan"">admin</span> that could be the principle of the <span style=""color:cyan"">university</span> or an employee and on the other side it helps also the <span style=""color:cyan"">students</span> . This system will make things easier for the <span style=""color:cyan"">admin</span>Â who will be supervising the student registration,course registration,and instructor regsitration . Note that this system is only used by the <span style=""color:cyan"">admin</span>, and <span style=""color:cyan"">students</span>.This system allows the <span style=""color:cyan"">admin</span> to register a <span style=""color:cyan"">student</span> with specific information.
                        The <span style=""color:cyan"">student</span> in the other hand can login with his specific <span style=""color:cyan"">username</span> and <span style=""color:cyan"">password</span> and view the courses he registered and its information.
                    </div>
                    <ul>
                        <li>
                            <a hre");
                WriteLiteral(@"f=""#"">
                                <span><i class=""fas fa-laptop-code""></i></span>
                                <span><i class=""fab fa-java"" style=""color:white""></i> Coded with Java using - Eclipse</span>
                            </a>
                        </li>
                        <li>
                            <a href=""#"">
                                <span><i class=""fas fa-database""></i></span>
                                <span>Database is Done using MS SQL Server</span>
                            </a>
                        </li>
                    </ul>
                    <div class=""images"">

                        <div class=""menu"">
                            <img src=""../images/loginUni.png"" alt="""">
                            <img src=""../images/menuUni.png"" alt="""">
                            <img src=""../images/StudentUni.png"" alt="""">
                            <img src=""../images/ViewUni.png"" alt="""">


                        </div>


       ");
                WriteLiteral(@"             </div>
                </div>
            </div>
            <div class=""service-box zoomIn animated delay-2s"">
                <div class=""service-title"">
                    <a href=""#""><i class=""fas fa-user-tie""></i> Hello Worker</a>
                </div>

                <div class=""service-desc"">
                    The purpose of this thesis is to design and implement a <span style=""color:cyan"">small</span> system for finding a specific work. We are facing an era in <span style=""color:cyan"">Lebanon</span> where job opportunities are becoming very low, graduated student or fresh workers may face difficulties in finding a job or there may be a job but its to far for them to know about. So this app shrinks the distance between the job opportunity and the worker.
                    This <span style=""color:cyan"">System</span> Â is designed for <span style=""color:cyan"">workers</span> and <span style=""color:cyan"">clients</span> both. <span style=""color:cyan"">Workers</span> can find requ");
                WriteLiteral(@"ests about a specific job and <span style=""color:cyan"">clients</span> can find a specific worker for a specific work they need to be done.
                    <span style=""color:cyan"">Users</span> can easily sign up for an account by filling specific information the system want to share about them, else if they already have an <span style=""color:cyan"">account</span> they can just login using their username and password chosen on their own.<span style=""color:cyan"">Clients</span> can view their profile , place a request about a certain issue they want to be fixed by a <span style=""color:cyan"">professional</span> and can view their notification in case a worker accepts their request. On the other side a worker can also view his <span style=""color:cyan"">profile</span>, view the requests posted by clients that is related to his specific skills he registered with, and can view his notification in case a <span style=""color:cyan"">client</span> accepts them for the job.
                </div>
                <ul>
");
                WriteLiteral(@"                    <li>
                        <a href=""#"">
                            <span><i class=""fas fa-laptop-code""></i></span>
                            <span><i class=""fab fa-java"" style=""color:white""></i> Coded with Javafx using Model-View-Controller</span>
                        </a>
                    </li>
                    <li>
                        <a href=""#"">
                            <span><i class=""fas fa-database""></i></span>
                            <span>Database is Done using MS SQL Server.</span>
                        </a>
                    </li>
                </ul>
                <div class=""images"">

                    <div class=""menu"">
                        <img src=""../images/login.png"" alt="""">
                        <img src=""../images/login2.png"" alt="""">
                        <img src=""../images/client.png"" alt="""">
                        <img src=""../images/worker.png"" alt="""">

                    </div>


                </d");
                WriteLiteral(@"iv>
            </div>

            <div class=""service-box zoomIn animated delay-3s"">
                <div class=""service-title"">
                    <a href=""#""><i class=""fas fa-clinic-medical""></i> Clinic Information System</a>
                </div>

                <div class=""service-desc"">
                    Clinic <span style=""color:cyan"">Information</span> System will interest all people unconditionally and freely. Therefore,it permits users (<span style=""color:cyan"">physicians</span>,<span style=""color:cyan"">patients</span>) to register and access it and make interaction between them. The benefits of the <span style=""color:cyan"">Clinic Information System</span> access to different physicians of specific specialties, access to accurate information about all <span style=""color:cyan"">patients</span> in the clinic, spend less time spent on tracking down records and test results, <span style=""color:cyan"">physicians</span> can check their appointment schedules anywhere and many other convenience");
                WriteLiteral(@"s. Hence, the <span style=""color:cyan"">patients</span> can save their time and the <span style=""color:cyan"">physician</span> can easily organize the patientâs files and data. This will save the time of <span style=""color:cyan"">physicians</span> so they could do some useful stuff other than waiting for a last minute <span style=""color:cyan"">patient</span>. On the top of that, when the <span style=""color:cyan"">physician</span> becomes available on the system,<span style=""color:cyan"">patients</span> could easily find the physician information, the specialty and other relevant details.
                </div>
                <ul>
                    <li>
                        <a href=""#"">
                            <span><i class=""fas fa-laptop-code""></i></span>
                            <span> Coded with ASP.Net Core technologies using Visual Studio</span>
                        </a>
                    </li>
                    <li>
                        <a href=""#"">
                          ");
                WriteLiteral(@"  <span><i class=""fas fa-database""></i></span>
                            <span>Database is Done using MS SQL Server</span>
                        </a>
                    </li>
                </ul>
                <div class=""images"">

                    <div class=""menu"">
                        <img src=""../images/loginClinic.png"" alt="""">
                        <img src=""../images/Adminfacilities.png"" alt="""">
                        <img src=""../images/Adminfacilities2.png"" alt="""">
                        <img src=""../images/doctor.png"" alt="""">
                        <img src=""../images/managedoctors.png"" alt="""">
                    </div>


                </div>
            </div>


        </div>
    </div>
    <script type=""text/javascript"">
      $("".services-section"").ripples({
        resolution:400,
        perturbance:0.003,
      });
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10781, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
